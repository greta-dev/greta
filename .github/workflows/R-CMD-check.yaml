on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: '1 23 * * Sun'

name: R-CMD-check

defaults:
  run:
    shell: Rscript {0}

jobs:
  R-CMD-check:
    name: ${{ matrix.os }}, tf-${{ matrix.tf }}, R-${{ matrix.r}}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: 'ubuntu-latest' , tf: 'default', r: 'release'}
          - {os: 'windows-latest', tf: 'default', r: 'release'}
          - {os: 'macOS-latest'  , tf: 'default', r: 'release'}

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.tf == 'nightly' || contains(matrix.tf, 'rc') || matrix.r == 'devel' }}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: 'true'
      R_COMPILE_AND_INSTALL_PACKAGES: 'never'
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        id: setup-r
        with:
          r-version: ${{ matrix.r }}
          Ncpus: '2L'
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Get Date
        id: get-date
        shell: bash
        run: |
          echo "::set-output name=year-week::$(date -u "+%Y-%U")"
          echo "::set-output name=date::$(date -u "+%F")"

      - name: Restore R package cache
        uses: actions/cache@v2
        id: r-package-cache
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ matrix.os }}-${{ steps.setup-r.outputs.installed-r-version }}-${{ steps.get-date.outputs.year-week }}-1

      - name: Install remotes
        if: steps.r-package-cache.outputs.cache-hit != 'true'
        run: install.packages("remotes")

      - name: Install system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          . /etc/os-release
          while read -r cmd
          do
            echo "$cmd"
            sudo $cmd
          done < <(Rscript -e "writeLines(remotes::system_requirements('$ID-$VERSION_ID'))")

      - name: Install package + deps
        run: remotes::install_local(dependencies = TRUE, force = TRUE)

      - name: Install greta deps
        run: |
          library(greta)
          greta::install_greta_deps(timeout = 50)

      - name: Situation Report on greta install
        run: greta::greta_sitrep()

      - name: Install rcmdcheck
        run: remotes::install_cran("rcmdcheck")

      - name: Check
        run: rcmdcheck::rcmdcheck(args = '--no-manual', error_on = 'warning', check_dir = 'check')

      - name: Show testthat output
        if: always()
        shell: bash
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true

      - name: Don't use tar from old Rtools to store the cache
        if: ${{ runner.os == 'Windows' && startsWith(steps.install-r.outputs.installed-r-version, '3') }}
        shell: bash
        run: echo "C:/Program Files/Git/usr/bin" >> $GITHUB_PATH

      - name: Check on single core machine
        if: runner.os != 'Windows'
        env:
          R_PARALLELLY_AVAILABLE_CORES: 1
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--no-multiarch"))

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
